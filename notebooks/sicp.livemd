# SICP

````elixir
Mix.install([
  {:kino, "~> 0.16.0"}
])

defmodule KinoGuide.RacketCell do
  use Kino.JS
  use Kino.JS.Live
  use Kino.SmartCell, name: "Racket script"

  @impl true
  def init(attrs, ctx) do
    source = attrs["source"] || ""

    {:ok, assign(ctx, source: source), editor: [source: source, language: "racket"]}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, %{}, ctx}
  end

  @impl true
  def handle_editor_change(source, ctx) do
    {:ok, assign(ctx, source: source)}
  end

  @impl true
  def to_attrs(ctx) do
    %{"source" => ctx.assigns.source}
  end

  @doc """
  Formats the output from System.cmd for Racket execution results.

  ## Parameters
  - `{output, exit_code}` when exit_code is an integer
  - `error` for any other case
  """
  def format_output({output, 0}) do
    Kino.Markdown.new("""
    ```elixir
    #{String.trim(output)}
    ```
    """)
  end

  def format_output({output, status}) when is_integer(status) do
    Kino.Markdown.new("""
    ## ❌ Racket Execution Error (Exit Code: #{status})

    ```elixir
    "#{String.trim(output)}"
    ```
    """)
  end

  def format_output(error) do
    Kino.Markdown.new("""
    ## ❌ System Error

    Failed to execute racket command: `#{inspect(error)}`
    """)
  end

  @impl true
  def to_source(attrs) do
    quote do
      System.cmd(
        "racket",
        ["-e", unquote(attrs["source"])],
        stderr_to_stdout: true
      )
      |> KinoGuide.RacketCell.format_output()
    end
    |> Kino.SmartCell.quoted_to_string()
  end

  asset "main.js" do
    """
    export function init(ctx, payload) {
      ctx.importCSS("main.css");

      root.innerHTML = `
        <div class="app">
          Racket script
        </div>
      `;
    }
    """
  end

  asset "main.css" do
    """
    .app {
      padding: 8px 16px;
      border: solid 1px #cad5e0;
      border-radius: 0.5rem 0.5rem 0 0;
      border-bottom: none;
    }
    """
  end
end

Kino.SmartCell.register(KinoGuide.RacketCell)
````

## Chapter 1

**Exercise 1.1**

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiIxMFxuKCsgNSAzIDQpXG4oLSA5IDEpXG4oLyA2IDIpXG4oKyAoKiAyIDQpICgtIDQgNikpXG4oZGVmaW5lIGEgMylcbihkZWZpbmUgYiAoKyBhIDEpKVxuKCsgYSBiICgqIGEgYikpXG4oPSBhIGIpXG4oaWYgKGFuZCAoPiBiIGEpICg8IGIgKCogYSBiKSkpIGIgYSlcbihjb25kXG4gIFsoPSBhIDQpIDZdXG4gIFsoPSBiIDQpICgrIDYgNyBhKV1cbiAgW2Vsc2UgMjVdKVxuKCsgMiAoaWYgKD4gYiBhKSBiIGEpKVxuKCogKGNvbmRcbiAgICAgWyg+IGEgYikgYV1cbiAgICAgWyg8IGEgYikgYl1cbiAgICAgW2Vsc2UgLTFdKVxuICAgKCsgYSAxKSkifQ","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd(
  "racket",
  [
    "-e",
    "10\n(+ 5 3 4)\n(- 9 1)\n(/ 6 2)\n(+ (* 2 4) (- 4 6))\n(define a 3)\n(define b (+ a 1))\n(+ a b (* a b))\n(= a b)\n(if (and (> b a) (< b (* a b))) b a)\n(cond\n  [(= a 4) 6]\n  [(= b 4) (+ 6 7 a)]\n  [else 25])\n(+ 2 (if (> b a) b a))\n(* (cond\n     [(> a b) a]\n     [(< a b) b]\n     [else -1])\n   (+ a 1))"
  ],
  stderr_to_stdout: true
)
|> KinoGuide.RacketCell.format_output()
```

**Exercise 1.2**

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiIoL1xuICAoKyA1IDQgKC0gMiAoLSAzICgrIDYgNC81KSkpKVxuICAoKiAzICgtIDYgMikgKC0gMiA3KSlcbikifQ","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd(
  "racket",
  ["-e", "(/\n  (+ 5 4 (- 2 (- 3 (+ 6 4/5))))\n  (* 3 (- 6 2) (- 2 7))\n)"],
  stderr_to_stdout: true
)
|> KinoGuide.RacketCell.format_output()
```

**Exercise 1.3**

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiI7OyBvb3BzIGkgY2hlYXRlZFxuKGRlZmluZSAodG9wLXN1bS1zcSBhIGIgYylcbiAgKGRlZmluZSBsIChtYXggYSBiKSlcbiAgKGRlZmluZSByIChtYXggYiBjKSlcbiAgKCtcbiAgICAoKiBsIGwpXG4gICAgKCogciByKVxuICApXG4pXG5cbih0b3Atc3VtLXNxIDEgMiAzKVxuKHRvcC1zdW0tc3EgLTY5NDIwIDIgMykifQ","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd(
  "racket",
  [
    "-e",
    ";; oops i cheated\n(define (top-sum-sq a b c)\n  (define l (max a b))\n  (define r (max b c))\n  (+\n    (* l l)\n    (* r r)\n  )\n)\n\n(top-sum-sq 1 2 3)\n(top-sum-sq -69420 2 3)"
  ],
  stderr_to_stdout: true
)
|> KinoGuide.RacketCell.format_output()
```

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiIoZGVmaW5lICh0b3Atc3VtLXNxIGEgYiBjKVxuICAoY29uZCBcbiAgIFsoYW5kICg+PSBhIGIpICg+PSBiIGMpKSAoKyAoKiBhIGEpICgqIGIgYikgKSBdXG4gICBbKGFuZCAoPj0gYSBjKSAoPj0gYyBiKSkgKCsgKCogYSBhKSAoKiBjIGMpICkgXVxuICAgWyhhbmQgKD49IGIgYSkgKD49IGEgYykpICgrICgqIGIgYikgKCogYSBhKSApIF1cbiAgIFsoYW5kICg+PSBiIGMpICg+PSBjIGEpKSAoKyAoKiBiIGIpICgqIGMgYykgKSBdXG4gICBbKGFuZCAoPj0gYyBhKSAoPj0gYSBiKSkgKCsgKCogYyBjKSAoKiBhIGEpICkgXVxuICAgWyhhbmQgKD49IGMgYikgKD49IGIgYSkpICgrICgqIGMgYykgKCogYiBiKSApIF1cbiAgKVxuKVxuXG4odG9wLXN1bS1zcSAxIDIgMyk7IHNob3VsZCBiZSAxM1xuKHRvcC1zdW0tc3EgLTYxMjMgMiAzKTsgc2hvdWxkIGJlIDEzIn0","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd(
  "racket",
  [
    "-e",
    "(define (top-sum-sq a b c)\n  (cond \n   [(and (>= a b) (>= b c)) (+ (* a a) (* b b) ) ]\n   [(and (>= a c) (>= c b)) (+ (* a a) (* c c) ) ]\n   [(and (>= b a) (>= a c)) (+ (* b b) (* a a) ) ]\n   [(and (>= b c) (>= c a)) (+ (* b b) (* c c) ) ]\n   [(and (>= c a) (>= a b)) (+ (* c c) (* a a) ) ]\n   [(and (>= c b) (>= b a)) (+ (* c c) (* b b) ) ]\n  )\n)\n\n(top-sum-sq 1 2 3); should be 13\n(top-sum-sq -6123 2 3); should be 13"
  ],
  stderr_to_stdout: true
)
|> KinoGuide.RacketCell.format_output()
```

Exercise 1.4

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiIoZGVmaW5lIChhLXBsdXMtYWJzLWIgYSBiKVxuIChjb25kIFsoPiBiIDApICgrIGEgYildIFtlbHNlICgtIGEgYildKVxuKVxuXG4oYS1wbHVzLWFicy1iIDEgMylcbihhLXBsdXMtYWJzLWIgMSAtMykifQ","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd(
  "racket",
  [
    "-e",
    "(define (a-plus-abs-b a b)\n (cond [(> b 0) (+ a b)] [else (- a b)])\n)\n\n(a-plus-abs-b 1 3)\n(a-plus-abs-b 1 -3)"
  ],
  stderr_to_stdout: true
)
|> KinoGuide.RacketCell.format_output()
```

Exercise 1.5

___

```racket
(define (p) (p))
(define (test x y) (if (= x 0) 0 y))
(test 0 (p))
```

* *p* is a function that returns itself recursively
* when *p* is evaluated it will go into an infinite loop
* *test* is a function that returns 0 if `x == 0`

Assuming evaluation rule for special form `if` checks left hand side first without evaluating the right - it would return zero. Otherwise, *p* would recur to infinite depth and cause a stack overflow.

<!-- livebook:{"break_markdown":true} -->

Exercise 1.6

___

Alyssa's program

```racket
(define (new-if predicate
                then-clause
                else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
(new-if (= 2 3) 0 5) ; 5
(new-if (= 1 1) 0 5) ; 0
```

She writes `sqrt-iter` as

```racket
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
```

Since we now use cond the else clause would get evaluated each time the function is called and get stuck in infinite recursion. The previous `if` only worked becuase LHS checks happens first.

<!-- livebook:{"break_markdown":true} -->

Exercise 1.7

___

Show how the test can fail for very small & very large

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiIoZGVmaW5lIChhdmVyYWdlIHggeSkgKC8gKCsgeCB5KSAyKSlcbihkZWZpbmUgKGltcHJvdmUgZ3Vlc3MgeCkgKGF2ZXJhZ2UgZ3Vlc3MgKC8geCBndWVzcykpKVxuKGRlZmluZSAoc3F1YXJlIHgpICgqIHggeCkpXG4oZGVmaW5lIChnb29kLWVub3VnaD8gZ3Vlc3MgeCkgKDwgKGFicyAoLSAoc3F1YXJlIGd1ZXNzKSB4KSkgMC4wMDEpKVxuKGRlZmluZSAoc3FydC1pdGVyIGd1ZXNzIHgpIChpZiAoZ29vZC1lbm91Z2g/IGd1ZXNzIHgpIGd1ZXNzIChzcXJ0LWl0ZXIgKGltcHJvdmUgZ3Vlc3MgeCkgeCkgKSApXG4oZGVmaW5lIChzcXJ0IHgpIChzcXJ0LWl0ZXIgMS4wIHgpKVxuXG47IENsb3NlIEVub3VnaCBva1xuKHdyaXRlbG4gKGxpc3QgXCJzdGFydFwiIDkgXCJleHBlY3RzXCIgMyBcInNxcnRcIiAoc3FydCA5KSBcInNxcnQgLiBzcVwiIChzcXVhcmUgKHNxcnQgOSkpICkpXG4od3JpdGVsbiAobGlzdCBcInN0YXJ0XCIgNCBcImV4cGVjdHNcIiAyIFwic3FydFwiIChzcXJ0IDQpIFwic3FydCAuIHNxXCIgKHNxdWFyZSAoc3FydCA0KSkgKSlcbih3cml0ZWxuIChsaXN0IFwic3RhcnRcIiAxMDAgXCJleHBlY3RzXCIgMTAgXCJzcXJ0XCIgKHNxcnQgMTAwKSBcInNxcnQgLiBzcVwiIChzcXVhcmUgKHNxcnQgMTAwKSkgKSlcblxuOyBJc3N1ZXNcbjsgKHNxcnQgMWUxNCk7IHNob3VsZCBiZSAxZTdcbjsgKHNxcnQgMWUyMSkgOyBvb3BzISB0aGUgZ29vZCBlbm91Z2ggZ3Vlc3MgaXMgYWx3YXlzIHRvbyBsYXJnZSBcbihzcXJ0IDFlLTEwKSA7IHNob3VsZCBiZSAxZS01XG4oc3FydCAxZS0yMCkgOyBzaG91bGQgYmUgMWUtMTAifQ","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd(
  "racket",
  [
    "-e",
    "(define (average x y) (/ (+ x y) 2))\n(define (improve guess x) (average guess (/ x guess)))\n(define (square x) (* x x))\n(define (good-enough? guess x) (< (abs (- (square guess) x)) 0.001))\n(define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x) ) )\n(define (sqrt x) (sqrt-iter 1.0 x))\n\n; Close Enough ok\n(writeln (list \"start\" 9 \"expects\" 3 \"sqrt\" (sqrt 9) \"sqrt . sq\" (square (sqrt 9)) ))\n(writeln (list \"start\" 4 \"expects\" 2 \"sqrt\" (sqrt 4) \"sqrt . sq\" (square (sqrt 4)) ))\n(writeln (list \"start\" 100 \"expects\" 10 \"sqrt\" (sqrt 100) \"sqrt . sq\" (square (sqrt 100)) ))\n\n; Issues\n; (sqrt 1e14); should be 1e7\n; (sqrt 1e21) ; oops! the good enough guess is always too large \n(sqrt 1e-10) ; should be 1e-5\n(sqrt 1e-20) ; should be 1e-10"
  ],
  stderr_to_stdout: true
)
|> KinoGuide.RacketCell.format_output()
```

Results when *N* gets smaller than our fixed `1e-2` it returns an approximation of `1e-2` instead of our *N*.

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiIoZGVmaW5lIChhdmVyYWdlIHggeSkgKC8gKCsgeCB5KSAyKSlcbihkZWZpbmUgKGltcHJvdmUgZ3Vlc3MgeCkgKGF2ZXJhZ2UgZ3Vlc3MgKC8geCBndWVzcykpKVxuKGRlZmluZSAoc3F1YXJlIHgpICgqIHggeCkpXG4oZGVmaW5lIChzcXJ0IHgpIChzcXJ0LWl0ZXIgMS4wIHgpKVxuXG4oZGVmaW5lIChnb29kLWVub3VnaD8gZzEgZzIpXHJcbiAgKG9yICh6ZXJvPyBnMilcclxuICAgICAgKDwgKC8gKGFicyAoLSBnMiBnMSkpIGcxKVxyXG4gICAgICAgICAwLjAwMSkpKVxyXG4oZGVmaW5lIChzcXJ0LWl0ZXIgZ3Vlc3MgeClcclxuICAobGV0ICgoYmV0dGVyIChpbXByb3ZlIGd1ZXNzIHgpKSlcclxuICAgIChpZiAoZ29vZC1lbm91Z2g/IGd1ZXNzIGJldHRlcilcclxuICAgICAgICBndWVzc1xyXG4gICAgICAgIChzcXJ0LWl0ZXIgYmV0dGVyIHgpKSkpXHJcblxuKHNxcnQgOSlcbihzcXJ0IDFlLTEpXG4oc3FydCAxZS0yKVxuKHNxcnQgMWUtMylcbihzcXJ0IDFlLTEwKSJ9","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd(
  "racket",
  [
    "-e",
    "(define (average x y) (/ (+ x y) 2))\n(define (improve guess x) (average guess (/ x guess)))\n(define (square x) (* x x))\n(define (sqrt x) (sqrt-iter 1.0 x))\n\n(define (good-enough? g1 g2)\r\n  (or (zero? g2)\r\n      (< (/ (abs (- g2 g1)) g1)\r\n         0.001)))\r\n(define (sqrt-iter guess x)\r\n  (let ((better (improve guess x)))\r\n    (if (good-enough? guess better)\r\n        guess\r\n        (sqrt-iter better x))))\r\n\n(sqrt 9)\n(sqrt 1e-1)\n(sqrt 1e-2)\n(sqrt 1e-3)\n(sqrt 1e-10)"
  ],
  stderr_to_stdout: true
)
|> KinoGuide.RacketCell.format_output()
```

Instead of checking the precision of guess we check for the magnitude of precision based on the input value. This is equivalent to 0.1% of X

| expr           | precision    | within | comments   |
| -------------- | ------------ | ------ | ---------- |
| sqrt(1e6)      | 0.001        | 0.001  | too strict |
| new-sqrt(1e6)  | 1000 * 0.001 | 1.0    | ok         |
| sqrt(1e6)      | 0.001        | 0.001  | too loose  |
| new-sqrt(1e-4) | 1e-2 * 0.001 | 1e-5   | ok         |

<!-- livebook:{"break_markdown":true} -->

Exercise 1.8

___

Using our previous 1e-3 precision

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiI7IGRlZmluZSBuZXd0b24ncyBtZXRob2QgZm9yIGN1YmUgcm9vdFxuKGRlZmluZSAoY3ViZSB4KSAoKiB4IHggeCkpXHJcbihkZWZpbmUgKGNicnQtaXRlciBndWVzcyB4KVxyXG4gIChpZiAoZ29vZC1lbm91Z2g/IGd1ZXNzIHgpXHJcbiAgICAgIGd1ZXNzXHJcbiAgICAgIChjYnJ0LWl0ZXIgKGltcHJvdmUgZ3Vlc3MgeCkgeCkpKVxyXG4oZGVmaW5lIChpbXByb3ZlIGd1ZXNzIHgpXHJcbiAgKC8gKCsgKC8geCAoKiBndWVzcyBndWVzcykpXHJcbiAgICAgICAgKCogMiBndWVzcykpXHJcbiAgICAgMykpXHJcbihkZWZpbmUgKGdvb2QtZW5vdWdoPyBndWVzcyB4KVxyXG4gICg8IChhYnMgKC0gKGN1YmUgZ3Vlc3MpIHgpKSAwLjAwMSkpXHJcbihkZWZpbmUgKGNicnQgeClcclxuICAoY2JydC1pdGVyIDEuMCB4KSlcclxuXHJcbihjYnJ0IDgpIDsgfj4gMi4wMDAwMDQ5MTE2NzU1MDRcciJ9","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd(
  "racket",
  [
    "-e",
    "; define newton's method for cube root\n(define (cube x) (* x x x))\r\n(define (cbrt-iter guess x)\r\n  (if (good-enough? guess x)\r\n      guess\r\n      (cbrt-iter (improve guess x) x)))\r\n(define (improve guess x)\r\n  (/ (+ (/ x (* guess guess))\r\n        (* 2 guess))\r\n     3))\r\n(define (good-enough? guess x)\r\n  (< (abs (- (cube guess) x)) 0.001))\r\n(define (cbrt x)\r\n  (cbrt-iter 1.0 x))\r\n\r\n(cbrt 8) ; ~> 2.000004911675504\r"
  ],
  stderr_to_stdout: true
)
|> KinoGuide.RacketCell.format_output()
```
