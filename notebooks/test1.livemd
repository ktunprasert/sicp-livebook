# Racket Smart Cell

````elixir
Mix.install([
  {:kino, "~> 0.16.0"}
])

defmodule KinoGuide.RacketCell do
  use Kino.JS
  use Kino.JS.Live
  use Kino.SmartCell, name: "Racket script"

  @impl true
  def init(attrs, ctx) do
    source = attrs["source"] || ""

    {:ok, assign(ctx, source: source), editor: [source: source, language: "racket"]}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, %{}, ctx}
  end

  @impl true
  def handle_editor_change(source, ctx) do
    {:ok, assign(ctx, source: source)}
  end

  @impl true
  def to_attrs(ctx) do
    %{"source" => ctx.assigns.source}
  end

  @doc """
  Formats the output from System.cmd for Racket execution results.

  ## Parameters
  - `{output, exit_code}` when exit_code is an integer
  - `error` for any other case
  """
  def format_output({output, 0}) do
    Kino.Markdown.new("""
    ## ✅ Racket Execution Success

    ```
    #{String.trim(output)}
    ```
    """)
  end

  def format_output({output, status}) when is_integer(status) do
    Kino.Markdown.new("""
    ## ❌ Racket Execution Error (Exit Code: #{status})

    ```
    #{String.trim(output)}
    ```
    """)
  end

  def format_output(error) do
    Kino.Markdown.new("""
    ## ❌ System Error

    Failed to execute racket command: `#{inspect(error)}`
    """)
  end

  @impl true
  def to_source(attrs) do
    quote do
      System.cmd(
        "racket",
        ["-e", unquote(attrs["source"])],
        stderr_to_stdout: true
      )
      |> KinoGuide.RacketCell.format_output()
    end
    |> Kino.SmartCell.quoted_to_string()
  end

  asset "main.js" do
    """
    export function init(ctx, payload) {
      ctx.importCSS("main.css");

      root.innerHTML = `
        <div class="app">
          Racket script
        </div>
      `;
    }
    """
  end

  asset "main.css" do
    """
    .app {
      padding: 8px 16px;
      border: solid 1px #cad5e0;
      border-radius: 0.5rem 0.5rem 0 0;
      border-bottom: none;
    }
    """
  end
end

Kino.SmartCell.register(KinoGuide.RacketCell)
````

## Section

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiIoKyAxIDIpXG4oKyAzIDQpIn0","chunks":null,"kind":"Elixir.KinoGuide.RacketCell","livebook_object":"smart_cell"} -->

```elixir
System.cmd("racket", ["-e", "(+ 1 2)\n(+ 3 4)"], stderr_to_stdout: true)
|> KinoGuide.RacketCell.format_output()
```

```elixir
System.cmd("racket", ["--version"])
```
